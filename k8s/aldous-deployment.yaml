apiVersion: apps/v1
kind: Deployment
metadata:
  name: aldous
  labels: { app: aldous, app.kubernetes.io/name: aldous, app.kubernetes.io/instance: aldous }
spec:
  replicas: 2
  selector:
    matchLabels: { app: aldous }
  template:
    metadata:
      labels: { app: aldous, app.kubernetes.io/name: aldous, app.kubernetes.io/instance: aldous }
    spec:
      initContainers:
        - name: init-storage
          image: busybox:1.36
          command: [sh, -c, 'set -eu; for d in logs framework framework/cache framework/sessions framework/views; do mkdir -p /var/www/html/storage/$d; done; chown -R 10001:10001 /var/www/html/storage']
          volumeMounts:
            - { name: storage, mountPath: /var/www/html/storage }
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector: { matchLabels: { app: aldous } }
                topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector: { matchLabels: { app: aldous } }
      serviceAccountName: aldous
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile: { type: RuntimeDefault }
      containers:
        - name: php
          image: localhost:5000/aldous:latest
          imagePullPolicy: IfNotPresent
          workingDir: /var/www/html
          ports: [ { containerPort: 8000 } ]
          env:
            - { name: LOG_CHANNEL, value: stderr }
            - { name: CACHE_DRIVER, value: file }
            - { name: SESSION_DRIVER, value: file }
          envFrom:
            - secretRef: { name: app-env }
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities: { drop: [ "ALL" ] }
            seccompProfile: { type: RuntimeDefault }
          resources:
            requests: { cpu: "50m", memory: "64Mi", ephemeral-storage: "100Mi" }
            limits:   { cpu: "500m", memory: "256Mi", ephemeral-storage: "500Mi" }
          volumeMounts:
            - { name: tmp,     mountPath: /tmp }
            - { name: storage, mountPath: /var/www/html/storage }
          livenessProbe:
            httpGet: { path: /health, port: 8000 }
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet: { path: /health, port: 8000 }
            initialDelaySeconds: 3
            periodSeconds: 5
      volumes:
        - { name: storage, emptyDir: {} }
        - { name: tmp,     emptyDir: {} }
